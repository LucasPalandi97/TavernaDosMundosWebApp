// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TdM.Database.Data;

#nullable disable

namespace TdM.Web.Migrations
{
    [DbContext(typeof(TavernaDbContext))]
    [Migration("20230330194811_inicial")]
    partial class inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContinenteCriatura", b =>
                {
                    b.Property<Guid>("ContinentesContinenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CriaturasCriaturaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContinentesContinenteId", "CriaturasCriaturaId");

                    b.HasIndex("CriaturasCriaturaId");

                    b.ToTable("ContinenteCriatura");
                });

            modelBuilder.Entity("ContinentePovo", b =>
                {
                    b.Property<Guid>("ContinentesContinenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PovosPovoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContinentesContinenteId", "PovosPovoId");

                    b.HasIndex("PovosPovoId");

                    b.ToTable("ContinentePovo");
                });

            modelBuilder.Entity("CriaturaRegiao", b =>
                {
                    b.Property<Guid>("CriaturasCriaturaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegioesRegiaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CriaturasCriaturaId", "RegioesRegiaoId");

                    b.HasIndex("RegioesRegiaoId");

                    b.ToTable("CriaturaRegiao");
                });

            modelBuilder.Entity("PovoRegiao", b =>
                {
                    b.Property<Guid>("PovosPovoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegioesRegiaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PovosPovoId", "RegioesRegiaoId");

                    b.HasIndex("RegioesRegiaoId");

                    b.ToTable("PovoRegiao");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Continente", b =>
                {
                    b.Property<Guid>("ContinenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MundoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("ContinenteId");

                    b.HasIndex("MundoId");

                    b.ToTable("Continentes");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Conto", b =>
                {
                    b.Property<Guid>("ContoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AudioDrama")
                        .HasColumnType("int");

                    b.Property<int>("Autor")
                        .HasColumnType("int");

                    b.Property<Guid?>("ContinenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Corpo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CriaturaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MundoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonagemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PovoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegiaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("ContoId");

                    b.HasIndex("ContinenteId");

                    b.HasIndex("CriaturaId");

                    b.HasIndex("MundoId");

                    b.HasIndex("PersonagemId");

                    b.HasIndex("PovoId");

                    b.HasIndex("RegiaoId");

                    b.ToTable("Contos");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Criatura", b =>
                {
                    b.Property<Guid>("CriaturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ClassTipo")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MundoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CriaturaId");

                    b.HasIndex("MundoId");

                    b.ToTable("Criaturas");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Mundo", b =>
                {
                    b.Property<Guid>("MundoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Autor")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("MundoId");

                    b.ToTable("Mundos");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Personagem", b =>
                {
                    b.Property<Guid>("PersonagemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biografia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassClasse")
                        .HasColumnType("int");

                    b.Property<int?>("ClassRaca")
                        .HasColumnType("int");

                    b.Property<Guid?>("ContinenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MundoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<Guid?>("PovoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegiaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("PersonagemId");

                    b.HasIndex("ContinenteId");

                    b.HasIndex("MundoId");

                    b.HasIndex("PovoId");

                    b.HasIndex("RegiaoId");

                    b.ToTable("Personagens");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Povo", b =>
                {
                    b.Property<Guid>("PovoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ClassRaca")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MundoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("PovoId");

                    b.HasIndex("MundoId");

                    b.ToTable("Povos");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Regiao", b =>
                {
                    b.Property<Guid>("RegiaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContinenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MundoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Simbolo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("RegiaoId");

                    b.HasIndex("ContinenteId");

                    b.HasIndex("MundoId");

                    b.ToTable("Regioes");
                });

            modelBuilder.Entity("ContinenteCriatura", b =>
                {
                    b.HasOne("TdM.Web.Models.Domain.Continente", null)
                        .WithMany()
                        .HasForeignKey("ContinentesContinenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TdM.Web.Models.Domain.Criatura", null)
                        .WithMany()
                        .HasForeignKey("CriaturasCriaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContinentePovo", b =>
                {
                    b.HasOne("TdM.Web.Models.Domain.Continente", null)
                        .WithMany()
                        .HasForeignKey("ContinentesContinenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TdM.Web.Models.Domain.Povo", null)
                        .WithMany()
                        .HasForeignKey("PovosPovoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CriaturaRegiao", b =>
                {
                    b.HasOne("TdM.Web.Models.Domain.Criatura", null)
                        .WithMany()
                        .HasForeignKey("CriaturasCriaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TdM.Web.Models.Domain.Regiao", null)
                        .WithMany()
                        .HasForeignKey("RegioesRegiaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PovoRegiao", b =>
                {
                    b.HasOne("TdM.Web.Models.Domain.Povo", null)
                        .WithMany()
                        .HasForeignKey("PovosPovoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TdM.Web.Models.Domain.Regiao", null)
                        .WithMany()
                        .HasForeignKey("RegioesRegiaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Continente", b =>
                {
                    b.HasOne("TdM.Web.Models.Domain.Mundo", "Mundo")
                        .WithMany("Continentes")
                        .HasForeignKey("MundoId");

                    b.Navigation("Mundo");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Conto", b =>
                {
                    b.HasOne("TdM.Web.Models.Domain.Continente", "Continente")
                        .WithMany("Contos")
                        .HasForeignKey("ContinenteId");

                    b.HasOne("TdM.Web.Models.Domain.Criatura", "Criatura")
                        .WithMany("Contos")
                        .HasForeignKey("CriaturaId");

                    b.HasOne("TdM.Web.Models.Domain.Mundo", "Mundo")
                        .WithMany("Contos")
                        .HasForeignKey("MundoId");

                    b.HasOne("TdM.Web.Models.Domain.Personagem", "Personagem")
                        .WithMany("Contos")
                        .HasForeignKey("PersonagemId");

                    b.HasOne("TdM.Web.Models.Domain.Povo", "Povo")
                        .WithMany("Contos")
                        .HasForeignKey("PovoId");

                    b.HasOne("TdM.Web.Models.Domain.Regiao", "Regiao")
                        .WithMany("Contos")
                        .HasForeignKey("RegiaoId");

                    b.Navigation("Continente");

                    b.Navigation("Criatura");

                    b.Navigation("Mundo");

                    b.Navigation("Personagem");

                    b.Navigation("Povo");

                    b.Navigation("Regiao");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Criatura", b =>
                {
                    b.HasOne("TdM.Web.Models.Domain.Mundo", "Mundo")
                        .WithMany("Criaturas")
                        .HasForeignKey("MundoId");

                    b.Navigation("Mundo");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Personagem", b =>
                {
                    b.HasOne("TdM.Web.Models.Domain.Continente", null)
                        .WithMany("Personagens")
                        .HasForeignKey("ContinenteId");

                    b.HasOne("TdM.Web.Models.Domain.Mundo", "Mundo")
                        .WithMany("Personagens")
                        .HasForeignKey("MundoId");

                    b.HasOne("TdM.Web.Models.Domain.Povo", "Povo")
                        .WithMany("Personagens")
                        .HasForeignKey("PovoId");

                    b.HasOne("TdM.Web.Models.Domain.Regiao", "Regiao")
                        .WithMany("Personagens")
                        .HasForeignKey("RegiaoId");

                    b.Navigation("Mundo");

                    b.Navigation("Povo");

                    b.Navigation("Regiao");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Povo", b =>
                {
                    b.HasOne("TdM.Web.Models.Domain.Mundo", "Mundo")
                        .WithMany("Povos")
                        .HasForeignKey("MundoId");

                    b.Navigation("Mundo");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Regiao", b =>
                {
                    b.HasOne("TdM.Web.Models.Domain.Continente", "Continente")
                        .WithMany("Regioes")
                        .HasForeignKey("ContinenteId");

                    b.HasOne("TdM.Web.Models.Domain.Mundo", "Mundo")
                        .WithMany("Regioes")
                        .HasForeignKey("MundoId");

                    b.Navigation("Continente");

                    b.Navigation("Mundo");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Continente", b =>
                {
                    b.Navigation("Contos");

                    b.Navigation("Personagens");

                    b.Navigation("Regioes");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Criatura", b =>
                {
                    b.Navigation("Contos");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Mundo", b =>
                {
                    b.Navigation("Continentes");

                    b.Navigation("Contos");

                    b.Navigation("Criaturas");

                    b.Navigation("Personagens");

                    b.Navigation("Povos");

                    b.Navigation("Regioes");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Personagem", b =>
                {
                    b.Navigation("Contos");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Povo", b =>
                {
                    b.Navigation("Contos");

                    b.Navigation("Personagens");
                });

            modelBuilder.Entity("TdM.Web.Models.Domain.Regiao", b =>
                {
                    b.Navigation("Contos");

                    b.Navigation("Personagens");
                });
#pragma warning restore 612, 618
        }
    }
}
